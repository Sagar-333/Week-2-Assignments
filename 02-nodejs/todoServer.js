/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');
const app = express();
const port = 3000
let path = __dirname+"/todos.json"

app.use(bodyParser.json());

app.get('/todos',(req,res) =>{
  fs.readFile(path,function(err,data){
    if(err) throw err;
    const info = JSON.parse(data);
    const filterInfo = info.filter(todo=>todo.Completed === "False"); // filter is used to filter the data 
    res.json(filterInfo);
  })
})

app.get('/todos/:id',(req,res)=>{
  fs.readFile(path,function(err,data){
    if(err) throw err;
    const info = JSON.parse(data);
    const ID = parseInt(req.params.id); // parseInt is done bcz id is a string we have to convert it into an int
    res.json(info[ID]);
  })
})

app.post('/addTodo',(req,res)=>{
  let newTodo = {
    ID : Math.floor(Math.random() * 1000000),
    title : req.body.Title,
    Completed : "False",
    description : req.body.Description
  };
  fs.readFile(path, "utf8", (err, data) => {
    if (err) throw err;
    const info = JSON.parse(data);
    info.push(newTodo);
    fs.writeFile(path, JSON.stringify(info), (err) => {
      if (err) throw err;
      res.status(201).send(newTodo);
    });
  });
})

app.put('/updateTodo/:id',(req,res)=>{
  fs.readFile(path, "utf8", (err,data) =>{
    if (err) throw err;
    const info = JSON.parse(data);
    const ID = parseInt(req.params.id);
    var index = 0 ;
    for (let i = 0; i < info.length; i++) {
      if (info[i].ID===ID) {
        index = i;
      }
    }
    info[index] = {
      ID : ID,
      title : req.body.title,
      completed : "True",
      description : req.body.description
    }
    fs.writeFile(path, JSON.stringify(info), (err) =>{
      if (err) throw err;
      res.status(201).send(info);
    })
  })
})

app.delete('/deleteTodo/:id', (req,res)=>{
  fs.readFile(path, "utf8", (err, data) => {
    if (err) throw err;
    const ID = parseInt(req.params.id)
    const info = JSON.parse(data);
    var newArray = []
    for (let i = 0; i < info.length; i++) {
      const arrID = parseInt(info[i].ID)
      if (arrID !== ID) {
        newArray.push(info[i]);
      }
    }
    fs.writeFile(path, JSON.stringify(newArray), (err) =>{
      if (err) throw err;
      res.status(201).send(newArray);
    })
  });
})

app.listen(port, ()=>{
  console.log(`Example app listening on port ${port}`)
})
// module.exports = app;
